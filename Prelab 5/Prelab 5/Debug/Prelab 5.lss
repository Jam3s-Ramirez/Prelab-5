
Prelab 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e9  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073b  00000000  00000000  00000b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000390  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043b  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005b  00000000  00000000  00001adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001b36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

uint8_t dutyCycle = 0;

int main(void)
{
    initPWM1FASTA(No_invertido, 1024);
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	74 e0       	ldi	r23, 0x04	; 4
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	0e 94 72 00 	call	0xe4	; 0xe4 <initPWM1FASTA>
	initPWM1FASTA(invertido, 1024);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	74 e0       	ldi	r23, 0x04	; 4
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 72 00 	call	0xe4	; 0xe4 <initPWM1FASTA>
	
	updateDutyCycleA(127);
  a4:	8f e7       	ldi	r24, 0x7F	; 127
  a6:	0e 94 8d 00 	call	0x11a	; 0x11a <updateDutyCycleA>
	updateDutyCycleB(120);
  aa:	88 e7       	ldi	r24, 0x78	; 120
  ac:	0e 94 93 00 	call	0x126	; 0x126 <updateDutyCycleB>
	
    while (1) 
    {
		OCR1A = dutyCycle;
  b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = dutyCycle;
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  c8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		dutyCycle++;
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	8f e3       	ldi	r24, 0x3F	; 63
  d8:	9c e9       	ldi	r25, 0x9C	; 156
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x4a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x50>
  e0:	00 00       	nop
  e2:	e6 cf       	rjmp	.-52     	; 0xb0 <main+0x20>

000000e4 <initPWM1FASTA>:
	
}

void initPWM1FASTB(uint8_t inverted, uint16_t prescaler){
	//CONFIGURAR EL PIN PB2 COMO SALIDA DE OC0B
	DDRB |= (1<<DDB2);
  e4:	94 b1       	in	r25, 0x04	; 4
  e6:	92 60       	ori	r25, 0x02	; 2
  e8:	94 b9       	out	0x04, r25	; 4
  ea:	88 23       	and	r24, r24
  ec:	31 f0       	breq	.+12     	; 0xfa <initPWM1FASTA+0x16>
  ee:	e0 e8       	ldi	r30, 0x80	; 128
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 6c       	ori	r24, 0xC0	; 192
  f6:	80 83       	st	Z, r24
  f8:	05 c0       	rjmp	.+10     	; 0x104 <initPWM1FASTA+0x20>
  fa:	e0 e8       	ldi	r30, 0x80	; 128
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 68       	ori	r24, 0x80	; 128
 102:	80 83       	st	Z, r24
 104:	e0 e8       	ldi	r30, 0x80	; 128
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	83 60       	ori	r24, 0x03	; 3
 10c:	80 83       	st	Z, r24
 10e:	e1 e8       	ldi	r30, 0x81	; 129
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	85 60       	ori	r24, 0x05	; 5
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <updateDutyCycleA>:
	
	
}

void updateDutyCycleA(uint8_t duty){
	OCR1A = duty;
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 120:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 124:	08 95       	ret

00000126 <updateDutyCycleB>:
}

void updateDutyCycleB(uint8_t duty){
	OCR1B = duty;
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 12c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
